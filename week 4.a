#include <stdio.h>
#include <stdbool.h> // for boolean type

#define MAX_SIZE 100 // Maximum size of the stack

// Define stack structure
struct Stack {
    int items[MAX_SIZE];
    int top;
};

// Initialize stack
void initStack(struct Stack *stack) {
    stack->top = -1; // Empty stack condition
}

// Function to check if stack is full
bool isFull(struct Stack *stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to check if stack is empty
bool isEmpty(struct Stack *stack) {
    return stack->top == -1;
}

// Function to push an element onto the stack
void push(struct Stack *stack, int value) {
    if (isFull(stack)) {
        printf("Stack Overflow - cannot push element %d\n", value);
    } else {
        stack->top++;
        stack->items[stack->top] = value;
        printf("Pushed element: %d\n", value);
    }
}

// Function to pop an element from the stack
int pop(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow - cannot pop from empty stack\n");
        return -1; // Return -1 indicating error
    } else {
        int popped = stack->items[stack->top];
        stack->top--;
        return popped;
    }
}

// Function to peek the top element of the stack
int peek(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty - cannot peek\n");
        return -1; // Return -1 indicating error
    } else {
        return stack->items[stack->top];
    }
}

int main() {
    struct Stack stack;
    initStack(&stack); // Initialize the stack

    // Example usage
    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);
    push(&stack, 40);

    printf("Top element: %d\n", peek(&stack));

    int poppedElement = pop(&stack);
    printf("Popped element: %d\n", poppedElement);

    printf("Top element after pop: %d\n", peek(&stack));

    return 0;
}
