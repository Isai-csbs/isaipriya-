#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Function prototypes
void insertAtBeginning(struct Node** head, int newData);
void insertAfter(struct Node* prevNode, int newData);
void insertAtEnd(struct Node** head, int newData);
struct Node* findElement(struct Node* head, int key);
struct Node* findNext(struct Node* head, int key);
struct Node* findPrevious(struct Node* head, int key);
int isLast(struct Node* head, struct Node* node);
int isEmpty(struct Node* head);
void deleteFromBeginning(struct Node** head);
void deleteAfter(struct Node* prevNode);
void deleteFromEnd(struct Node** head);
void deleteList(struct Node** head);
void displayList(struct Node* head);
void printMenu();

int main() {
    struct Node* head = NULL;
    int choice, data, key;
    struct Node* foundNode = NULL;
    
    while (1) {
        printMenu();
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1:
                printf("Enter data to insert at beginning: ");
                scanf("%d", &data);
                insertAtBeginning(&head, data);
                break;
            case 2:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                printf("Enter key after which to insert: ");
                scanf("%d", &key);
                foundNode = findElement(head, key);
                if (foundNode != NULL) {
                    insertAfter(foundNode, data);
                } else {
                    printf("Key not found in the list.\n");
                }
                break;
            case 3:
                printf("Enter data to insert at end: ");
                scanf("%d", &data);
                insertAtEnd(&head, data);
                break;
            case 4:
                printf("Enter element to find: ");
                scanf("%d", &key);
                foundNode = findElement(head, key);
                if (foundNode != NULL) {
                    printf("Element %d found in the list.\n", key);
                } else {
                    printf("Element %d not found in the list.\n", key);
                }
                break;
            case 5:
                printf("Enter element to find next: ");
                scanf("%d", &key);
                foundNode = findNext(head, key);
                if (foundNode != NULL) {
                    printf("Next element after %d is %d.\n", key, foundNode->data);
                } else {
                    printf("Element %d not found or it is the last node.\n", key);
                }
                break;
            case 6:
                printf("Enter element to find previous: ");
                scanf("%d", &key);
                foundNode = findPrevious(head, key);
                if (foundNode != NULL) {
                    printf("Previous element before %d is %d.\n", key, foundNode->data);
                } else {
                    printf("Element %d not found or it is the first node.\n", key);
                }
                break;
            case 7:
                printf("Enter element to check if last: ");
                scanf("%d", &key);
                foundNode = findElement(head, key);
                if (foundNode != NULL) {
                    if (isLast(head, foundNode)) {
                        printf("Element %d is the last node.\n", key);
                    } else {
                        printf("Element %d is not the last node.\n", key);
                    }
                } else {
                    printf("Element %d not found in the list.\n", key);
                }
                break;
            case 8:
                if (isEmpty(head)) {
                    printf("The list is empty.\n");
                } else {
                    printf("The list is not empty.\n");
                }
                break;
            case 9:
                deleteFromBeginning(&head);
                break;
            case 10:
                printf("Enter key after which to delete: ");
                scanf("%d", &key);
                foundNode = findElement(head, key);
                if (foundNode != NULL && foundNode->next != NULL) {
                    deleteAfter(foundNode);
                } else {
                    printf("Element %d not found or it is the last node.\n", key);
                }
                break;
            case 11:
                deleteFromEnd(&head);
                break;
            case 12:
                deleteList(&head);
                printf("List deleted successfully.\n");
                break;
            case 13:
                displayList(head);
                break;
            case 14:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice. Please enter a valid choice.\n");
        }
    }
    
    return 0;
}

// Function definitions

void printMenu() {
    printf("\n");
    printf("1. Insert at beginning\n");
    printf("2. Insert after a node\n");
    printf("3. Insert at end\n");
    printf("4. Find an element\n");
    printf("5. Find next\n");
    printf("6. Find previous\n");
    printf("7. Check if last\n");
    printf("8. Check if empty\n");
    printf("9. Delete from beginning\n");
    printf("10. Delete after a node\n");
    printf("11. Delete from end\n");
    printf("12. Delete the list\n");
    printf("13. Display\n");
    printf("14. Exit\n");
    printf("\n");
}

// Insert a node at the beginning of the list
void insertAtBeginning(struct Node** head, int newData) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = newData;
    newNode->next = *head;
    *head = newNode;
    printf("Node inserted at the beginning successfully.\n");
}

// Insert a node after a given node
void insertAfter(struct Node* prevNode, int newData) {
    if (prevNode == NULL) {
        printf("Previous node cannot be NULL.\n");
        return;
    }
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = newData;
    newNode->next = prevNode->next;
    prevNode->next = newNode;
    printf("Node inserted after the given node successfully.\n");
}

// Insert a node at the end of the list
void insertAtEnd(struct Node** head, int newData) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = newData;
    newNode->next = NULL;
    
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
    printf("Node inserted at the end successfully.\n");
}

// Find an element in the list
struct Node* findElement(struct Node* head, int key) {
    struct Node* current = head;
    while (current != NULL) {
        if (current->data == key) {
            return current;
        }
        current = current->next;
    }
    return NULL;
}

// Find the next element after a given key
struct Node* findNext(struct Node* head, int key) {
    struct Node* current = findElement(head, key);
    if (current != NULL && current->next != NULL) {
        return current->next;
    }
    return NULL;
}

// Find the previous element before a given key
struct Node* findPrevious(struct Node* head, int key) {
    struct Node* prev = NULL;
    struct Node* current = head;
    while (current != NULL && current->data != key) {
        prev = current;
        current = current->next;
    }
    return prev;
}

// Check if a given node is the last node
int isLast(struct Node* head, struct Node* node) {
    if (node != NULL && node->next == NULL) {
        return 1;
    }
    return 0;
}

// Check if the list is empty
int isEmpty(struct Node* head) {
    if (head == NULL) {
        return 1;
    }
    return 0;
}

// Delete the first node from the beginning
void deleteFromBeginning(struct Node** head) {
    if (*head == NULL) {
        printf("List is already empty.\n");
        return;
    }
    struct Node* temp = *head;
    *head = (*head)->next;
    free(temp);
    printf("Node deleted from the beginning successfully.\n");
}

// Delete the node after a given node
void deleteAfter(struct Node* prevNode) {
    if (prevNode == NULL || prevNode->next == NULL) {
        printf("Cannot delete. Previous node is NULL or next node is NULL.\n");
        return;
    }
    struct Node* temp = prevNode->next;
    prevNode->next = temp->next;
    free(temp);
    printf("Node deleted after the given node successfully.\n");
}

// Delete the last node from the end
void deleteFromEnd(struct Node**
